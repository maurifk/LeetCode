module HowGoodAreYou where
import Data.Function (on)
import Control.Applicative (Applicative(liftA2))
import Control.Monad (liftM2)

average :: [Int] -> Float
average = liftA2 ((/) `on` fromIntegral) sum length

-- Mine
-- betterThanAverage :: [Int] -> Int -> Bool
-- betterThanAverage xs x = fromIntegral x > average(x:xs)

-- Pointfree autogenerated
betterThanAverage :: [Int] -> Int -> Bool
betterThanAverage = liftM2 (>) fromIntegral . (average .) . flip (:)
